(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{375:function(n,s,r){"use strict";r.r(s);var a=r(3),t=Object(a.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("p",[n._v("// 快速排列\n// 思路：选择数组中的一个值作为基准，将数组中小于该值的数置于该数之前，大于该值的数置于该数之后，接着对该数前后的两个数组进行重复操作直至排序完成。\n// 参考：https://www.cnblogs.com/et-008/p/16472607.html\n// 时间复杂度 最好O(nlg(n)) 最坏：O(n2) | 空间：O(nlgn)")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("function quickSort(arr) {\n    let len = arr.length;\n    let left = [],right=[];\n    if(len < 2) return arr;\n    for(let i=1;i<len;i++){\n        if(arr[i] < arr[0]) {\n            left.push(arr[i]);\n        }else {\n            right.push(arr[i]);\n        }\n    }\n    return quickSort(left).concat([arr[0]],quickSort(right))\n}\n\nconst arr = [9, 4, 3, 1, 6, 3, 8, 7];\nconsole.log(quickSort(arr)) \n\n\n\n\nfunction quickSort1(arr) {\n    const len = arr.length;\n    if (len < 2) return arr;\n    let left = [],right=[];\n    for(let i=1;i<len;i++){\n        if(arr[i] < arr[0]) {\n            left.push(arr[i])\n        }else {\n            right.push(arr[i])\n        }\n    }\n    return quickSort(left).concat([arr[0]],quickSort(right))\n}\nconsole.log(quickSort1(arr))\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);